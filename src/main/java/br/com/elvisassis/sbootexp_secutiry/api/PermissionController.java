package br.com.elvisassis.sbootexp_secutiry.api;import br.com.elvisassis.sbootexp_secutiry.domain.dto.PermissionDTO;import br.com.elvisassis.sbootexp_secutiry.domain.service.PermissionService;import io.swagger.v3.oas.annotations.security.SecurityRequirement;import io.swagger.v3.oas.annotations.tags.Tag;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.core.Authentication;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/api/grupos")@Tag(name = "Permission", description = "Endpoints for Managing Groups")public class PermissionController {    private final PermissionService service;    public PermissionController(PermissionService permissionService) {        this.service = permissionService;    }    @PostMapping    @PreAuthorize("hasRole('ADMIN')")    @SecurityRequirement(name = "jwtAuth")    public ResponseEntity<PermissionDTO> save(@RequestBody PermissionDTO dto, Authentication authentication) {        var response = service.save(dto);        return ResponseEntity.ok(response);    }    @GetMapping    @PreAuthorize("hasRole('ADMIN')")    @SecurityRequirement(name = "jwtAuth")    public ResponseEntity<List<PermissionDTO>> findaAll() {        var response = service.findAll();        return ResponseEntity.ok(response);    }}