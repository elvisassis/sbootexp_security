package br.com.elvisassis.sbootexp_secutiry.api;import br.com.elvisassis.sbootexp_secutiry.domain.dto.AuthRequestDTO;import br.com.elvisassis.sbootexp_secutiry.domain.service.AuthService;import org.apache.commons.lang3.StringUtils;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping("/auth")public class AuthController {    private final AuthenticationManager authenticationManager;    private final AuthService service;    public AuthController(AuthenticationManager authenticationManager, AuthService service) {        this.authenticationManager = authenticationManager;        this.service = service;    }    @PostMapping("/signin")    public ResponseEntity<?> signin(@RequestBody AuthRequestDTO request) {        if (credentialsIsInvalid(request))            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Invalid client request");        var token = service.sigIn(request);        return ResponseEntity.ok(token);    }    @PutMapping("/refresh/{username}")    public ResponseEntity<?> refreshToken(@PathVariable("username") String username,                                          @RequestHeader("Authorization") String refreshToken) {        if (parametersAreInvalid(username, refreshToken))            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Invalid client request!");        var token = service.refreshToken(username, refreshToken);        if (token == null)            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Invalid client request!");        return token;    }    @PostMapping    public ResponseEntity<AuthRequestDTO> create(@RequestBody AuthRequestDTO authRequestDTO) {        if (credentialsIsInvalid(authRequestDTO)) {            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);        }        AuthRequestDTO user = service.create(authRequestDTO);        return ResponseEntity.status(HttpStatus.CREATED).body(user);    }    private static boolean credentialsIsInvalid(AuthRequestDTO credentials) {        return credentials == null ||                StringUtils.isBlank(credentials.getPassword()) ||                StringUtils.isBlank(credentials.getPassword());    }    private boolean parametersAreInvalid(String username, String refreshToken) {        return StringUtils.isBlank(username) || StringUtils.isBlank(refreshToken);    }}