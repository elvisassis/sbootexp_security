package br.com.elvisassis.sbootexp_secutiry.api;import br.com.elvisassis.sbootexp_secutiry.domain.dto.RequestUserPermissionDTO;import br.com.elvisassis.sbootexp_secutiry.domain.dto.ResponseUserPermissionDTO;import br.com.elvisassis.sbootexp_secutiry.domain.dto.UserPermissionDTO;import br.com.elvisassis.sbootexp_secutiry.domain.service.UserPermissionService;import io.swagger.v3.oas.annotations.security.SecurityRequirement;import io.swagger.v3.oas.annotations.tags.Tag;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/api/usuario-grupos")@Tag(name = "UserPermission", description = "Endpoints for Managing UserPermission")public class UserPermissionController {    private final UserPermissionService service;    public UserPermissionController(UserPermissionService service) {        this.service = service;    }    @PostMapping    @PreAuthorize("hasRole('ADMIN')")    @SecurityRequirement(name = "jwt")    public ResponseEntity<UserPermissionDTO> save(@RequestBody RequestUserPermissionDTO dto) {        var response = service.save(dto);        return ResponseEntity.ok(response);    }    @GetMapping("/{isUser}")    @SecurityRequirement(name = "jwtAuth")    public ResponseEntity<ResponseUserPermissionDTO> findByUserId(@PathVariable("isUser") String idUser) {        var response = service.findByUserId(idUser);        return ResponseEntity.ok(response);    }    @GetMapping    @SecurityRequirement(name = "jwtAuth")    public ResponseEntity<List<ResponseUserPermissionDTO>> findAllUserGroups() {        var response = service.findAllUserGroups();        return ResponseEntity.ok(response);    }}