package br.com.elvisassis.sbootexp_secutiry.api;import br.com.elvisassis.sbootexp_secutiry.domain.dto.RequestUserGroupDTO;import br.com.elvisassis.sbootexp_secutiry.domain.dto.ResponseUserGroupDTO;import br.com.elvisassis.sbootexp_secutiry.domain.dto.UserGroupDTO;import br.com.elvisassis.sbootexp_secutiry.domain.repository.UserGroupRepository;import br.com.elvisassis.sbootexp_secutiry.domain.service.UserGroupService;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/api/usuario-grupos")public class UserGroupController {  private final UserGroupService service;    public UserGroupController(UserGroupService service) {        this.service = service;    }    @PostMapping    @PreAuthorize("hasRole('ADMIN')")    public ResponseEntity<UserGroupDTO> save(@RequestBody RequestUserGroupDTO dto) {        var response = service.save(dto);        return ResponseEntity.ok(response);    }    @GetMapping("/{isUser}")    public ResponseEntity<ResponseUserGroupDTO> findByUserId(@PathVariable("isUser") String idUser) {        var response = service.findByUserId(idUser);        return ResponseEntity.ok(response);    }    @GetMapping    public ResponseEntity<List<ResponseUserGroupDTO>> findAllUserGroups() {        var response = service.findAllUserGroups();        return ResponseEntity.ok(response);    }}