package br.com.elvisassis.sbootexp_secutiry.domain.service;import br.com.elvisassis.sbootexp_secutiry.domain.dto.*;import br.com.elvisassis.sbootexp_secutiry.exception.GroupNotFoundException;import br.com.elvisassis.sbootexp_secutiry.exception.UserGroupNotFoundException;import br.com.elvisassis.sbootexp_secutiry.domain.entity.User;import br.com.elvisassis.sbootexp_secutiry.domain.entity.UserGroup;import br.com.elvisassis.sbootexp_secutiry.domain.repository.GroupRepository;import br.com.elvisassis.sbootexp_secutiry.domain.repository.UserGroupRepository;import br.com.elvisassis.sbootexp_secutiry.domain.repository.UserRepository;import br.com.elvisassis.sbootexp_secutiry.exception.UserNotFoundException;import jakarta.transaction.Transactional;import org.springframework.stereotype.Service;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@Servicepublic class UserGroupService {    private final UserGroupRepository repository;    private final UserRepository userRepository;    private final GroupRepository groupRepository;    public UserGroupService(UserGroupRepository repository, UserRepository userRepository, GroupRepository groupRepository) {        this.repository = repository;        this.userRepository = userRepository;        this.groupRepository = groupRepository;    }    @Transactional    public UserGroupDTO save(RequestUserGroupDTO dto) {        var user = userRepository.findById(dto.getUserId())                .orElseThrow(() -> new UserNotFoundException("User not found!"));        var group = groupRepository.findById(dto.getUserId())                .orElseThrow(() -> new GroupNotFoundException("Group not found!"));        var userGroup = new UserGroup(user, group);        var response = repository.save(userGroup);        return new UserGroupDTO(response);    }    public ResponseUserGroupDTO findByUserId(String userId) {        List<UserGroup> userGroups = repository.findByUserId(userId);        if (userGroups.isEmpty()) {            throw new UserGroupNotFoundException("Grupo Usuário não encontrado para o id de Usuário.");        }        UserDTO userDto = new UserDTO(userGroups.get(0).getUser()); // todos têm o mesmo usuário        List<GroupDTO> groupDtos = userGroups.stream()                .map(ug -> new GroupDTO(ug.getGroup()))                .collect(Collectors.toList());        return new ResponseUserGroupDTO(userDto, groupDtos);    }    public List<ResponseUserGroupDTO> findAllUserGroups() {        List<UserGroup> all = repository.findAll();        // Agrupa por usuário        Map<User, List<UserGroup>> grouped = all.stream()                .collect(Collectors.groupingBy(UserGroup::getUser));        // Transforma para lista de DTOs        return grouped.entrySet().stream()                .map(entry -> {                    UserDTO userDTO = new UserDTO(entry.getKey());                    List<GroupDTO> groups = entry.getValue().stream()                            .map(ug -> new GroupDTO(ug.getGroup()))                            .collect(Collectors.toList());                    return new ResponseUserGroupDTO(userDTO, groups);                })                .collect(Collectors.toList());    }}