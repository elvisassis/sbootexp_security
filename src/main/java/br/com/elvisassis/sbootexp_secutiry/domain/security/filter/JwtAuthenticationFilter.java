package br.com.elvisassis.sbootexp_secutiry.domain.security.filter;import br.com.elvisassis.sbootexp_secutiry.domain.security.utils.JwtTokenProvider;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.apache.commons.lang3.StringUtils;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import java.io.IOException;@Componentpublic class JwtAuthenticationFilter extends OncePerRequestFilter {    private final JwtTokenProvider tokenProvider;    public JwtAuthenticationFilter(JwtTokenProvider tokenProvider) {        this.tokenProvider = tokenProvider;    }    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {        var token = tokenProvider.resolveToken((HttpServletRequest) request);        if (StringUtils.isNotBlank(token) && tokenProvider.validateToken(token)) {            Authentication authentication = tokenProvider.getAuthentication(token);            if (authentication != null) {                SecurityContextHolder.getContext().setAuthentication(authentication);            }        }        filterChain.doFilter(request, response);    }}