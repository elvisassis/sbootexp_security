package br.com.elvisassis.sbootexp_secutiry.domain.security;import org.springframework.security.core.Authentication;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;public class CustomAuthentication implements Authentication {    private final UserIdentify userIdentify;    public CustomAuthentication(UserIdentify userIdentify) {        if(userIdentify == null) {            throw new ExceptionInInitializerError("It is not possible to create a CustomAuthentication without User identification");        }        this.userIdentify = userIdentify;    }    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return this.userIdentify                .getPermissions()                .stream()                .map(perm -> new SimpleGrantedAuthority(perm))                .collect(Collectors.toList());    }    @Override    public Object getCredentials() {        return null;    }    @Override    public Object getDetails() {        return null;    }    @Override    public Object getPrincipal() {        return this.userIdentify;    }    @Override    public boolean isAuthenticated() {        return true;    }    @Override    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {        throw new IllegalArgumentException("No need to call, we are already authenticated");    }    @Override    public String getName() {        return this.userIdentify.getName();    }}