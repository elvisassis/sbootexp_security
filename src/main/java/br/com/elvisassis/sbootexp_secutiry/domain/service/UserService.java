package br.com.elvisassis.sbootexp_secutiry.domain.service;import br.com.elvisassis.sbootexp_secutiry.domain.dto.RequestUserDTO;import br.com.elvisassis.sbootexp_secutiry.domain.dto.UserDTO;import br.com.elvisassis.sbootexp_secutiry.domain.entity.User;import br.com.elvisassis.sbootexp_secutiry.domain.entity.UserGroup;import br.com.elvisassis.sbootexp_secutiry.domain.repository.GroupRepository;import br.com.elvisassis.sbootexp_secutiry.domain.repository.UserGroupRepository;import br.com.elvisassis.sbootexp_secutiry.domain.repository.UserRepository;import jakarta.transaction.Transactional;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@Servicepublic class UserService {    private final UserRepository repository;    private final GroupRepository groupRepository;    private final UserGroupRepository userGroupRepository;    private final PasswordEncoder passwordEncoder;    public UserService(UserRepository repository, GroupRepository groupRepository, UserGroupRepository userGroupRepository, PasswordEncoder passwordEncoder) {        this.repository = repository;        this.groupRepository = groupRepository;        this.userGroupRepository = userGroupRepository;        this.passwordEncoder = passwordEncoder;    }    @Transactional    public RequestUserDTO save(RequestUserDTO dto) {        var passwordEncode = passwordEncoder.encode(dto.getUser().getPassword());        var user = dto.getUser().toEntity();        user.setPassword(passwordEncode);        repository.save(user);        var groups = groupRepository.findAllByNames(dto.getPermissions());        List<UserGroup> userGroups = groups.stream()                .map(group -> new UserGroup(user, group))                .collect(Collectors.toList());        userGroupRepository.saveAll(userGroups);        var permissoes = groups.stream()                .map(group -> group.getName())                .collect(Collectors.toList());        return new RequestUserDTO(new UserDTO(user), permissoes);    }    public List<UserDTO> findAll() {        var users = repository.findAll();        var response = users.stream()                .map(UserDTO::new)                .collect(Collectors.toList());        return response;    }    public User getUserWithPermissions(String login) {        Optional<User> userOptional = repository.findByLogin(login);        if (userOptional.isEmpty()) {            return null;        }        User user = userOptional.get();        var permissions = userGroupRepository.findPermissionsByUser(user);        user.setPermissions(permissions);        return user;    }}