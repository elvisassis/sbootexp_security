package br.com.elvisassis.sbootexp_secutiry.domain.service;import br.com.elvisassis.sbootexp_secutiry.domain.dto.RequestUserDTO;import br.com.elvisassis.sbootexp_secutiry.domain.dto.UserDTO;import br.com.elvisassis.sbootexp_secutiry.domain.entity.User;import br.com.elvisassis.sbootexp_secutiry.domain.entity.UserPermission;import br.com.elvisassis.sbootexp_secutiry.domain.repository.PermissionRepository;import br.com.elvisassis.sbootexp_secutiry.domain.repository.UserPermissionRepository;import br.com.elvisassis.sbootexp_secutiry.domain.repository.UserRepository;import br.com.elvisassis.sbootexp_secutiry.mapper.UserMapper;import jakarta.transaction.Transactional;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;@Servicepublic class UserService implements UserDetailsService {    private final UserRepository repository;    private final PermissionRepository permissionRepository;    private final UserPermissionRepository userPermissionRepository;    private final PasswordEncoder passwordEncoder;    public UserService(UserRepository repository, PermissionRepository permissionRepository, UserPermissionRepository userPermissionRepository, PasswordEncoder passwordEncoder) {        this.repository = repository;        this.permissionRepository = permissionRepository;        this.userPermissionRepository = userPermissionRepository;        this.passwordEncoder = passwordEncoder;    }    @Transactional    public RequestUserDTO save(RequestUserDTO dto) {        var passwordEncode = passwordEncoder.encode(dto.getUser().getPassword());        var user = UserMapper.userRequestDTOUser(dto.getUser(), passwordEncode);        repository.save(user);        var groups = permissionRepository.findAllByNames(dto.getPermissions());        List<UserPermission> userPermissions = groups.stream()                .map(group -> new UserPermission(user, group))                .collect(Collectors.toList());        userPermissionRepository.saveAll(userPermissions);        var permissions = groups.stream()                .map(group -> group.getName())                .collect(Collectors.toList());        return new RequestUserDTO(new UserDTO(user), permissions);    }    public List<UserDTO> findAll() {        var users = repository.findAll();        var response = users.stream()                .map(UserDTO::new)                .collect(Collectors.toList());        return response;    }    public User getUserWithPermissions(String username) {        User user = repository.findByUsername(username)                .orElseThrow(() -> new UsernameNotFoundException("Username " + username + " not found"));        return user;    }    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        var user = repository.findByUsername(username)                .orElseThrow(() -> new UsernameNotFoundException("Username " + username + " not found"));        return user;    }}