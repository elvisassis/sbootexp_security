package br.com.elvisassis.sbootexp_secutiry.domain.service;import br.com.elvisassis.sbootexp_secutiry.domain.dto.*;import br.com.elvisassis.sbootexp_secutiry.domain.entity.User;import br.com.elvisassis.sbootexp_secutiry.domain.entity.UserPermission;import br.com.elvisassis.sbootexp_secutiry.domain.repository.PermissionRepository;import br.com.elvisassis.sbootexp_secutiry.domain.repository.UserPermissionRepository;import br.com.elvisassis.sbootexp_secutiry.domain.repository.UserRepository;import br.com.elvisassis.sbootexp_secutiry.exception.GroupNotFoundException;import br.com.elvisassis.sbootexp_secutiry.exception.UserGroupNotFoundException;import br.com.elvisassis.sbootexp_secutiry.exception.UserNotFoundException;import jakarta.transaction.Transactional;import org.springframework.stereotype.Service;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@Servicepublic class UserPermissionService {    private final UserPermissionRepository repository;    private final UserRepository userRepository;    private final PermissionRepository permissionRepository;    public UserPermissionService(UserPermissionRepository repository, UserRepository userRepository, PermissionRepository permissionRepository) {        this.repository = repository;        this.userRepository = userRepository;        this.permissionRepository = permissionRepository;    }    @Transactional    public UserPermissionDTO save(RequestUserPermissionDTO dto) {        var user = userRepository.findById(dto.getUserId())                .orElseThrow(() -> new UserNotFoundException("User not found!"));        var permission = permissionRepository.findById(dto.getPermissionId())                .orElseThrow(() -> new GroupNotFoundException("Permission not found!"));        var userPermission = new UserPermission(user, permission);        var response = repository.save(userPermission);        return new UserPermissionDTO(response);    }    public ResponseUserPermissionDTO findByUserId(String userId) {        List<UserPermission> userPermissions = repository.findByUserId(userId);        if (userPermissions.isEmpty()) {            throw new UserGroupNotFoundException("Grupo Usuário não encontrado para o id de Usuário.");        }        UserDTO userDto = new UserDTO(userPermissions.get(0).getUser()); // todos têm o mesmo usuário        List<PermissionDTO> permissionDtos = userPermissions.stream()                .map(ug -> new PermissionDTO(ug.getPermission()))                .collect(Collectors.toList());        return new ResponseUserPermissionDTO(userDto, permissionDtos);    }    public List<ResponseUserPermissionDTO> findAllUserGroups() {        List<UserPermission> all = repository.findAll();        // Agrupa por usuário        Map<User, List<UserPermission>> grouped = all.stream()                .collect(Collectors.groupingBy(UserPermission::getUser));        // Transforma para lista de DTOs        return grouped.entrySet().stream()                .map(entry -> {                    UserDTO userDTO = new UserDTO(entry.getKey());                    List<PermissionDTO> groups = entry.getValue().stream()                            .map(ug -> new PermissionDTO(ug.getPermission()))                            .collect(Collectors.toList());                    return new ResponseUserPermissionDTO(userDTO, groups);                })                .collect(Collectors.toList());    }}