package br.com.elvisassis.sbootexp_secutiry.domain.entity;import jakarta.persistence.*;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import org.hibernate.annotations.GenericGenerator;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import java.util.Collection;import java.util.Collections;import java.util.List;import java.util.UUID;@Entity@Table(name = "users")@Data@AllArgsConstructor@NoArgsConstructorpublic class User implements UserDetails {    @Id    @GeneratedValue(generator = "UUID")    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")    private String id;    @Column(name = "user_name", nullable = false, unique = true)    private String username;    @Column(name = "full_name")    private String fullName;    @Column(nullable = false)    private String password;    @Column(name = "account_non_expired")    private Boolean accountNonExpired;    @Column(name = "account_non_locked")    private Boolean accountNonLocked;    @Column(name = "credentials_non_expired")    private Boolean credentialsNonExpired;    @Column    private Boolean enabled;    @ManyToMany(fetch = FetchType.EAGER)    @JoinTable(name = "user_permission",            joinColumns = {@JoinColumn (name = "id_user")},            inverseJoinColumns = {@JoinColumn (name = "id_permission")}    )    private List<Permission> permissions;    public User(String username, String password, String fullname) {    }    @PrePersist    public void prePersist() {        if (this.id == null) {            this.id = UUID.randomUUID().toString();        }    }    public User(String username, String fullName, String password, Boolean accountNonExpired, Boolean accountNonLocked, Boolean credentialsNonExpired, Boolean enabled, List<Permission> permissions) {        this.username = username;        this.fullName = fullName;        this.password = password;        this.accountNonExpired = accountNonExpired;        this.accountNonLocked = accountNonLocked;        this.credentialsNonExpired = credentialsNonExpired;        this.enabled = enabled;        this.permissions = permissions;    }    public void setPermissions(List<Permission> permissions) {        this.permissions = permissions;    }    public List<String> getRoles() {        if (this.permissions == null) return List.of();        var roles = this.permissions.stream()                .map(Permission::getName)                .toList();        return roles;    }    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {    if (this.permissions == null) return Collections.emptyList();        var authorities = this.permissions.stream()                .map(permission -> new SimpleGrantedAuthority(permission.getName()))                .toList();        return authorities;    }}